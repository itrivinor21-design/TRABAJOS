class GrafoMatriz {
    constructor() {
        this.vertices = [];
        this.matriz = [];
    }

    agregarVertice(v) {
        this.vertices.push(v);
        
        for (let fila of this.matriz) {
            fila.push(0);
        }
        
        this.matriz.push(new Array(this.vertices.length).fill(0));
    }

    agregarArista(v1, v2) {
        let i = this.vertices.indexOf(v1);
        let j = this.vertices.indexOf(v2);
        if(i !== -1 && j !== -1) {
            this.matriz[i][j] = 1;
            this.matriz[j][i] = 1; 
        }
    }

    mostrarMatriz() {
        console.log('Matriz de Adyacencia:');
        console.log(' ', this.vertices.join(' '));
        for (let i = 0; i < this.matriz.length; i++) {
            console.log(this.vertices[i], this.matriz[i].join(' '));
        }
    }
}


class GrafoLista {
    constructor() {
        this.grafo = new Map();
    }

    agregarVertice(v) {
        if(!this.grafo.has(v)) {
            this.grafo.set(v, []);
        }
    }

    agregarArista(v1, v2) {
        if(this.grafo.has(v1)) {
            this.grafo.get(v1).push(v2);
        }
        if(this.grafo.has(v2)) {
            this.grafo.get(v2).push(v1); 
        }
    }

    mostrarGrafo() {
        console.log('Lista de Adyacencia:');
        for(let [vertice, adyacentes] of this.grafo) {
            console.log(`${vertice} -> ${adyacentes.join(', ')}`);
        }
    }
}


const grafoMatriz = new GrafoMatriz();
['A','B','C','D'].forEach(v => grafoMatriz.agregarVertice(v));
grafoMatriz.agregarArista('A','B');
grafoMatriz.agregarArista('B','C');
grafoMatriz.agregarArista('C','D');
grafoMatriz.agregarArista('D','A');
grafoMatriz.mostrarMatriz();


const grafoLista = new GrafoLista();
['A','B','C','D'].forEach(v => grafoLista.agregarVertice(v));
grafoLista.agregarArista('A','B');
grafoLista.agregarArista('A','C');
grafoLista.agregarArista('B','D');
grafoLista.mostrarGrafo();
